openapi: 3.0.1
info:
  contact:
    email: solarch-team@puppet.com
  description: This is the API documentation for the Puppet Data Service API. You
    can find out more about the [PDS API at here](https://github.com/reidmv/reidmv-puppet_data_service).
    For this sample, you can use the api key `special-key` to test the authorization
    filters.
  license:
    name: TBD
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: 'WIP: Puppet Data Service API'
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: localhost:3000/v1
security:
- bearerAuth: []
tags:
- description: Every config change should be started with an authorized Admin User
  externalDocs:
    description: TBD Find out more
    url: https://puppet.com/
  name: users
- description: Node details and configuration data, Nodedata stores configuration
    details for a specific node
  name: nodes
- description: Hierdata manages your Hiera Key:Value as a service
  name: hiera-data
paths:
  /users:
    get:
      description: This can only be done by the logged in user with an administrator
        role.
      operationId: getAllUsers
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: successful operation
        "401":
          description: Access (Bearer) token is missing or invalid
      summary: Get all available users
      tags:
      - users
    post:
      description: The body params are required to be a JSON object with an array
        of users. This endpoint supports bulk operations, you can create one or 1000
        users in a single POST request.
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/NewUsers'
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/User'
                type: array
          description: Created
        "401":
          description: Access (Bearer) token is missing or invalid
      summary: Create user
      tags:
      - users
      x-codegen-request-body-name: body
  /users/{username}:
    delete:
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - description: The username
        explode: false
        in: path
        name: username
        required: true
        schema:
          $ref: '#/components/schemas/Username'
        style: simple
      responses:
        "200":
          content: {}
          description: Ok
        "400":
          content: {}
          description: Invalid username supplied
        "401":
          description: Access (Bearer) token is missing or invalid
        "404":
          content: {}
          description: Username not found
      summary: Deletes a user
      tags:
      - users
    get:
      description: Retrieve a specific user.
      operationId: getUserByUsername
      parameters:
      - description: The username
        explode: false
        in: path
        name: username
        required: true
        schema:
          $ref: '#/components/schemas/Username'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Ok
        "400":
          description: Invalid user supplied
        "401":
          description: Access (Bearer) token is missing or invalid
        "404":
          description: User not found
      summary: Get user by username
      tags:
      - users
    put:
      description: If the username does not exist, it will create it for you. This
        endpoint does not support bulk operations
      operationId: putUser
      parameters:
      - description: The username
        explode: false
        in: path
        name: username
        required: true
        schema:
          $ref: '#/components/schemas/Username'
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/NewUser'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Updated
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: Created
        "400":
          description: Invalid username supplied
        "401":
          description: Access (Bearer) token is missing or invalid
      summary: Create a new user or replace an existing user
      tags:
      - users
  /users/{username}/token:
    get:
      description: Retrieve an API token for the user
      operationId: getTokenByUsername
      parameters:
      - description: The username
        explode: false
        in: path
        name: username
        required: true
        schema:
          $ref: '#/components/schemas/Username'
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: Ok
        "400":
          description: Invalid user supplied
        "401":
          description: Access (Bearer) token is missing or invalid
        "404":
          description: User not found
      summary: Get API token by username
      tags:
      - users
  /nodes:
    get:
      description: This can only be done by the logged in user.
      operationId: getAllNodes
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Node'
                type: array
          description: successful operation
        "401":
          description: Access (Bearer) token is missing or invalid
      summary: Get all available nodes
      tags:
      - nodes
    post:
      description: The body params are required to be a JSON object with an array
        of node's data. This endpoint supports bulk operations, you can create one
        or 1000 nodedata in a single POST request.
      operationId: createNode
      requestBody:
        $ref: '#/components/requestBodies/NewNodes'
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Node'
                type: array
          description: Created
        "401":
          description: Access (Bearer) token is missing or invalid
      summary: Create new node(s)
      tags:
      - nodes
  /nodes/{name}:
    delete:
      description: This can only be done by the logged in user.
      operationId: deleteNode
      parameters:
      - description: The node name to be fetched or modified. Use node1 for testing.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Ok
        "400":
          content: {}
          description: Invalid Node name supplied
        "401":
          description: Access (Bearer) token is missing or invalid
        "404":
          content: {}
          description: Nodedata not found
      summary: Deletes a node
      tags:
      - nodes
    get:
      description: Retrieve a specific node.
      operationId: getNodeByName
      parameters:
      - description: The node name to be fetched or modified. Use node1 for testing.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
          description: Ok
        "400":
          description: Invalid node-name supplied
        "401":
          description: Access (Bearer) token is missing or invalid
        "404":
          description: Node not found
      summary: Get node by node name
      tags:
      - nodes
    put:
      description: If the node name does not exist, it will create it for you. This
        endpoint does not support bulk operations
      operationId: putNodeByName
      parameters:
      - description: The node name to be fetched or modified. Use node1 for testing.
        explode: false
        in: path
        name: name
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/NewNode'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
          description: Updated
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
          description: Created
        "400":
          description: Invalid node-name supplied
        "401":
          description: Access (Bearer) token is missing or invalid
      summary: Create a new node or replace an existing node
      tags:
      - nodes
  /hiera-data:
    get:
      description: Get all Hiera data
      operationId: getHieraData
      parameters:
      - description: (Optional) This will filter by Hiera level (URL encoded), e.g.
          'level%2Fone%2Fglobal'
        explode: true
        in: query
        name: level
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/HieraValue'
                type: array
          description: successful operation
        "401":
          description: Access (Bearer) token is missing or invalid
      summary: Get all hiera data available in the system
      tags:
      - hiera-data
    post:
      description: The body params are required to be a JSON object with an array
        of Hieradata. This endpoint supports bulk operations, you can create one or
        1000 hieradata in a single POST request.
      operationId: createHieraData
      requestBody:
        $ref: '#/components/requestBodies/NewHieraData'
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/HieraValue'
                type: array
          description: Created
        "401":
          description: Access (Bearer) token is missing or invalid
      summary: Create new Hiera data value(s)
      tags:
      - hiera-data
      x-codegen-request-body-name: body
  /hiera-data/{level}/{key}:
    delete:
      description: Permanently removes the Hiera object that matches the level/key
        ID
      operationId: deleteHieraDataObject
      parameters:
      - description: The Hiera level
        explode: false
        in: path
        name: level
        required: true
        schema:
          type: string
        style: simple
      - description: The Hiera key
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content: {}
          description: Ok
        "400":
          content: {}
          description: Invalid level or key supplied
        "401":
          description: Access (Bearer) token is missing or invalid
        "404":
          content: {}
          description: Hieradata not found
      summary: Deletes a Hieradata object
      tags:
      - hiera-data
    get:
      description: Get Hiera data that matches the given {level} and {key}
      operationId: getHieraDataWithLevelAndKey
      parameters:
      - description: The Hiera level
        explode: false
        in: path
        name: level
        required: true
        schema:
          type: string
        style: simple
      - description: The Hiera key
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HieraValue'
          description: successful operation
        "401":
          description: Access (Bearer) token is missing or invalid
        "404":
          description: Hiera data not found for the given level and key
      summary: Get a specific hiera value
      tags:
      - hiera-data
    put:
      description: If the hieradata with the compound ID {level} and {key} does not
        exist, it will create it for you. This endpoint does not support bulk operations
      operationId: upsertHieraDataWithLevelAndKey
      parameters:
      - description: The Hiera level
        explode: false
        in: path
        name: level
        required: true
        schema:
          type: string
        style: simple
      - description: The Hiera key
        explode: false
        in: path
        name: key
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        $ref: '#/components/requestBodies/EditHieraValue'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HieraValue'
          description: successful operation
        "401":
          description: Access (Bearer) token is missing or invalid
      summary: Upserts a specific hiera object
      tags:
      - hiera-data
components:
  parameters:
    Username:
      description: The username
      explode: false
      in: path
      name: username
      required: true
      schema:
        $ref: '#/components/schemas/Username'
      style: simple
    NodeName:
      description: The node name to be fetched or modified. Use node1 for testing.
      explode: false
      in: path
      name: name
      required: true
      schema:
        type: string
      style: simple
    HieraLevel:
      description: The Hiera level
      explode: false
      in: path
      name: level
      required: true
      schema:
        type: string
      style: simple
    HieraKey:
      description: The Hiera key
      explode: false
      in: path
      name: key
      required: true
      schema:
        type: string
      style: simple
    OptionalHieraLevel:
      description: (Optional) This will filter by Hiera level (URL encoded), e.g.
        'level%2Fone%2Fglobal'
      explode: true
      in: query
      name: level
      required: false
      schema:
        type: string
      style: form
  requestBodies:
    NewUser:
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ImmutableUserProperties'
            - $ref: '#/components/schemas/EditableUserProperties'
            - required:
              - username
      description: Create or edit user object
    NewUsers:
      content:
        application/json:
          schema:
            items:
              allOf:
              - $ref: '#/components/schemas/ImmutableUserProperties'
              - $ref: '#/components/schemas/EditableUserProperties'
              - required:
                - username
            type: array
      description: Create user object(s)
    NewNode:
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/ImmutableNodeProperties'
            - $ref: '#/components/schemas/EditableNodeProperties'
            - required:
              - name
      description: Create or edit node object
    NewNodes:
      content:
        application/json:
          schema:
            items:
              allOf:
              - $ref: '#/components/schemas/ImmutableNodeProperties'
              - $ref: '#/components/schemas/EditableNodeProperties'
              - required:
                - name
            type: array
      description: Create node object(s)
    NewHieraData:
      content:
        application/json:
          schema:
            items:
              allOf:
              - $ref: '#/components/schemas/ImmutableHieraValueProperties'
              - $ref: '#/components/schemas/EditableHieraValueProperties'
              - required:
                - key
                - level
                - value
            type: array
      description: Create new Hiera data value(s)
    EditHieraValue:
      content:
        application/json:
          schema:
            allOf:
            - $ref: '#/components/schemas/EditableHieraValueProperties'
            - required:
              - value
      description: Create or edit a Hiera value at a specified level and key
  responses:
    UnauthorizedError:
      description: Access (Bearer) token is missing or invalid
  schemas:
    Username:
      pattern: ^([-\d\w.]+){2}$
      type: string
    TimestampProperties:
      properties:
        created-at:
          format: date-time
          type: string
        updated-at:
          format: date-time
          type: string
      type: object
    ImmutableUserProperties:
      example:
        username: username
      properties:
        username:
          pattern: ^([-\d\w.]+){2}$
          type: string
      type: object
    EditableUserProperties:
      properties:
        email:
          type: string
        role:
          default: operator
          description: User role
          enum:
          - administrator
          - operator
          type: string
      type: object
    ReadOnlyUserProperties:
      properties:
        status:
          default: active
          description: User status
          enum:
          - active
          - inactive
          - deleted
          type: string
      type: object
    User:
      allOf:
      - $ref: '#/components/schemas/ImmutableUserProperties'
      - $ref: '#/components/schemas/EditableUserProperties'
      - $ref: '#/components/schemas/ReadOnlyUserProperties'
      - $ref: '#/components/schemas/TimestampProperties'
    Token:
      example:
        token: token
      properties:
        token:
          description: API token
          type: string
      type: object
    ImmutableNodeProperties:
      example:
        name: name
      properties:
        name:
          type: string
      type: object
    EditableNodeProperties:
      properties:
        code-environment:
          description: Code environment
          enum:
          - staging
          - production
          - compliance
          type: string
        classes:
          items:
            type: string
          type: array
        trusted-data:
          type: object
      type: object
    Node:
      allOf:
      - $ref: '#/components/schemas/ImmutableNodeProperties'
      - $ref: '#/components/schemas/EditableNodeProperties'
      - $ref: '#/components/schemas/TimestampProperties'
    ImmutableHieraValueProperties:
      example:
        level: level
        key: key
      properties:
        level:
          type: string
        key:
          type: string
      type: object
    EditableHieraValueProperties:
      properties:
        value:
          description: The value to set the Hiera key to
          nullable: true
          type: string
      type: object
    HieraValue:
      allOf:
      - $ref: '#/components/schemas/ImmutableHieraValueProperties'
      - $ref: '#/components/schemas/EditableHieraValueProperties'
      - $ref: '#/components/schemas/TimestampProperties'
  securitySchemes:
    bearerAuth:
      scheme: bearer
      type: http
