// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// Defines values for EditableNodePropertiesCodeEnvironment.
const (
	EditableNodePropertiesCodeEnvironmentCompliance EditableNodePropertiesCodeEnvironment = "compliance"

	EditableNodePropertiesCodeEnvironmentProduction EditableNodePropertiesCodeEnvironment = "production"

	EditableNodePropertiesCodeEnvironmentStaging EditableNodePropertiesCodeEnvironment = "staging"
)

// Defines values for EditableUserPropertiesRole.
const (
	EditableUserPropertiesRoleOperator EditableUserPropertiesRole = "operator"

	EditableUserPropertiesRoleSuperadmin EditableUserPropertiesRole = "superadmin"
)

// Defines values for EditableUserPropertiesStatus.
const (
	EditableUserPropertiesStatusActive EditableUserPropertiesStatus = "active"

	EditableUserPropertiesStatusDeleted EditableUserPropertiesStatus = "deleted"

	EditableUserPropertiesStatusInactive EditableUserPropertiesStatus = "inactive"
)

// EditableHieraValueProperties defines model for EditableHieraValueProperties.
type EditableHieraValueProperties struct {
	// The value to set the Hiera key to
	Value *interface{} `json:"value"`
}

// EditableNodeProperties defines model for EditableNodeProperties.
type EditableNodeProperties struct {
	Classes *EditableNodeProperties_Classes `json:"classes,omitempty"`

	// Code environment
	CodeEnvironment *EditableNodePropertiesCodeEnvironment `json:"code-environment,omitempty"`
	TrustedData     *map[string]interface{}                `json:"trusted-data,omitempty"`
}

// EditableNodeProperties_Classes defines model for EditableNodeProperties.Classes.
type EditableNodeProperties_Classes struct {
	AdditionalProperties map[string]string `json:"-"`
}

// Code environment
type EditableNodePropertiesCodeEnvironment string

// EditableUserProperties defines model for EditableUserProperties.
type EditableUserProperties struct {
	Email *string `json:"email,omitempty"`

	// User role
	Role *EditableUserPropertiesRole `json:"role,omitempty"`

	// User status
	Status *EditableUserPropertiesStatus `json:"status,omitempty"`
}

// User role
type EditableUserPropertiesRole string

// User status
type EditableUserPropertiesStatus string

// Key-value pairs of Hiera data for a particular level
type HieraLevel struct {
	// key-value pairs of Hiera data for the level
	Data *HieraLevel_Data `json:"data,omitempty"`

	// The level of the data being returned
	Level *string `json:"level,omitempty"`
}

// key-value pairs of Hiera data for the level
type HieraLevel_Data struct {
	AdditionalProperties map[string]string `json:"-"`
}

// HieraValue defines model for HieraValue.
type HieraValue struct {
	// Embedded struct due to allOf(#/components/schemas/ImmutableHieraValueProperties)
	ImmutableHieraValueProperties `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/EditableHieraValueProperties)
	EditableHieraValueProperties `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TimestampProperties)
	TimestampProperties `yaml:",inline"`
}

// ImmutableHieraValueProperties defines model for ImmutableHieraValueProperties.
type ImmutableHieraValueProperties struct {
	Key   *string `json:"key,omitempty"`
	Level *string `json:"level,omitempty"`
}

// ImmutableNodeProperties defines model for ImmutableNodeProperties.
type ImmutableNodeProperties struct {
	Name *string `json:"name,omitempty"`
}

// ImmutableUserProperties defines model for ImmutableUserProperties.
type ImmutableUserProperties struct {
	Username *Username `json:"username,omitempty"`
}

// Node defines model for Node.
type Node struct {
	// Embedded struct due to allOf(#/components/schemas/ImmutableNodeProperties)
	ImmutableNodeProperties `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/EditableNodeProperties)
	EditableNodeProperties `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TimestampProperties)
	TimestampProperties `yaml:",inline"`
}

// TimestampProperties defines model for TimestampProperties.
type TimestampProperties struct {
	CreatedAt *time.Time `json:"created-at,omitempty"`
	UpdatedAt *time.Time `json:"updated-at,omitempty"`
}

// Token defines model for Token.
type Token struct {
	// API token
	Token *string `json:"token,omitempty"`
}

// User defines model for User.
type User struct {
	// Embedded struct due to allOf(#/components/schemas/ImmutableUserProperties)
	ImmutableUserProperties `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/EditableUserProperties)
	EditableUserProperties `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/TimestampProperties)
	TimestampProperties `yaml:",inline"`
}

// Username defines model for Username.
type Username string

// NodeName defines model for NodeName.
type NodeName string

// OptionalHieraKey defines model for OptionalHieraKey.
type OptionalHieraKey string

// OptionalHieraLevel defines model for OptionalHieraLevel.
type OptionalHieraLevel string

// EditHieraLevel defines model for EditHieraLevel.
type EditHieraLevel []struct {
	// Embedded fields due to inline allOf schema
	Key *string `json:"key,omitempty"`
	// Embedded struct due to allOf(#/components/schemas/EditableHieraValueProperties)
	EditableHieraValueProperties `yaml:",inline"`
	// Embedded fields due to inline allOf schema
}

// EditHieraValues defines model for EditHieraValues.
type EditHieraValues []struct {
	// Embedded struct due to allOf(#/components/schemas/ImmutableHieraValueProperties)
	ImmutableHieraValueProperties `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/EditableHieraValueProperties)
	EditableHieraValueProperties `yaml:",inline"`
	// Embedded fields due to inline allOf schema
}

// ListHieraValues defines model for ListHieraValues.
type ListHieraValues []struct {
	// Embedded struct due to allOf(#/components/schemas/ImmutableHieraValueProperties)
	ImmutableHieraValueProperties `yaml:",inline"`
	// Embedded fields due to inline allOf schema
}

// NewNode defines model for NewNode.
type NewNode struct {
	// Embedded struct due to allOf(#/components/schemas/ImmutableNodeProperties)
	ImmutableNodeProperties `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/EditableNodeProperties)
	EditableNodeProperties `yaml:",inline"`
	// Embedded fields due to inline allOf schema
}

// NewUser defines model for NewUser.
type NewUser struct {
	// Embedded struct due to allOf(#/components/schemas/ImmutableUserProperties)
	ImmutableUserProperties `yaml:",inline"`
	// Embedded struct due to allOf(#/components/schemas/EditableUserProperties)
	EditableUserProperties `yaml:",inline"`
	// Embedded fields due to inline allOf schema
}

// DeleteHieraLevelParams defines parameters for DeleteHieraLevel.
type DeleteHieraLevelParams struct {
	// The Hiera level
	Level HieraLevel `json:"level"`
}

// GetHieraLevelParams defines parameters for GetHieraLevel.
type GetHieraLevelParams struct {
	// The Hiera level
	Level HieraLevel `json:"level"`
}

// PutHieraLevelParams defines parameters for PutHieraLevel.
type PutHieraLevelParams struct {
	// The Hiera level
	Level HieraLevel `json:"level"`
}

// GetHieraValuesParams defines parameters for GetHieraValues.
type GetHieraValuesParams struct {
	// The Hiera level
	Level *OptionalHieraLevel `json:"level,omitempty"`

	// The Hiera key
	Key *OptionalHieraKey `json:"key,omitempty"`
}

// PutHieraLevelJSONRequestBody defines body for PutHieraLevel for application/json ContentType.
type PutHieraLevelJSONRequestBody EditHieraLevel

// DeleteHieraValuesJSONRequestBody defines body for DeleteHieraValues for application/json ContentType.
type DeleteHieraValuesJSONRequestBody ListHieraValues

// UpsertHieraValuesJSONRequestBody defines body for UpsertHieraValues for application/json ContentType.
type UpsertHieraValuesJSONRequestBody EditHieraValues

// PutNodeByNameJSONRequestBody defines body for PutNodeByName for application/json ContentType.
type PutNodeByNameJSONRequestBody NewNode

// CreateUserJSONRequestBody defines body for CreateUser for application/json ContentType.
type CreateUserJSONRequestBody NewUser

// Getter for additional properties for EditableNodeProperties_Classes. Returns the specified
// element and whether it was found
func (a EditableNodeProperties_Classes) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for EditableNodeProperties_Classes
func (a *EditableNodeProperties_Classes) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for EditableNodeProperties_Classes to handle AdditionalProperties
func (a *EditableNodeProperties_Classes) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for EditableNodeProperties_Classes to handle AdditionalProperties
func (a EditableNodeProperties_Classes) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// Getter for additional properties for HieraLevel_Data. Returns the specified
// element and whether it was found
func (a HieraLevel_Data) Get(fieldName string) (value string, found bool) {
	if a.AdditionalProperties != nil {
		value, found = a.AdditionalProperties[fieldName]
	}
	return
}

// Setter for additional properties for HieraLevel_Data
func (a *HieraLevel_Data) Set(fieldName string, value string) {
	if a.AdditionalProperties == nil {
		a.AdditionalProperties = make(map[string]string)
	}
	a.AdditionalProperties[fieldName] = value
}

// Override default JSON handling for HieraLevel_Data to handle AdditionalProperties
func (a *HieraLevel_Data) UnmarshalJSON(b []byte) error {
	object := make(map[string]json.RawMessage)
	err := json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if len(object) != 0 {
		a.AdditionalProperties = make(map[string]string)
		for fieldName, fieldBuf := range object {
			var fieldVal string
			err := json.Unmarshal(fieldBuf, &fieldVal)
			if err != nil {
				return fmt.Errorf("error unmarshaling field %s: %w", fieldName, err)
			}
			a.AdditionalProperties[fieldName] = fieldVal
		}
	}
	return nil
}

// Override default JSON handling for HieraLevel_Data to handle AdditionalProperties
func (a HieraLevel_Data) MarshalJSON() ([]byte, error) {
	var err error
	object := make(map[string]json.RawMessage)

	for fieldName, field := range a.AdditionalProperties {
		object[fieldName], err = json.Marshal(field)
		if err != nil {
			return nil, fmt.Errorf("error marshaling '%s': %w", fieldName, err)
		}
	}
	return json.Marshal(object)
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// DeleteHieraLevel request
	DeleteHieraLevel(ctx context.Context, params *DeleteHieraLevelParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHieraLevel request
	GetHieraLevel(ctx context.Context, params *GetHieraLevelParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutHieraLevel request with any body
	PutHieraLevelWithBody(ctx context.Context, params *PutHieraLevelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutHieraLevel(ctx context.Context, params *PutHieraLevelParams, body PutHieraLevelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHieraLevels request
	GetHieraLevels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHieraValues request
	GetHieraValues(ctx context.Context, params *GetHieraValuesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteHieraValues request with any body
	DeleteHieraValuesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteHieraValues(ctx context.Context, body DeleteHieraValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpsertHieraValues request with any body
	UpsertHieraValuesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpsertHieraValues(ctx context.Context, body UpsertHieraValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllNodes request
	GetAllNodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteNode request
	DeleteNode(ctx context.Context, name NodeName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetNodeByName request
	GetNodeByName(ctx context.Context, name NodeName, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutNodeByName request with any body
	PutNodeByNameWithBody(ctx context.Context, name NodeName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutNodeByName(ctx context.Context, name NodeName, body PutNodeByNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllUsers request
	GetAllUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUser request with any body
	CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserByUsername request
	GetUserByUsername(ctx context.Context, username Username, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTokenByUsername request
	GetTokenByUsername(ctx context.Context, username Username, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) DeleteHieraLevel(ctx context.Context, params *DeleteHieraLevelParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHieraLevelRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHieraLevel(ctx context.Context, params *GetHieraLevelParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHieraLevelRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutHieraLevelWithBody(ctx context.Context, params *PutHieraLevelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutHieraLevelRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutHieraLevel(ctx context.Context, params *PutHieraLevelParams, body PutHieraLevelJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutHieraLevelRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHieraLevels(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHieraLevelsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHieraValues(ctx context.Context, params *GetHieraValuesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHieraValuesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHieraValuesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHieraValuesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteHieraValues(ctx context.Context, body DeleteHieraValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteHieraValuesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertHieraValuesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertHieraValuesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpsertHieraValues(ctx context.Context, body UpsertHieraValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpsertHieraValuesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllNodes(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllNodesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteNode(ctx context.Context, name NodeName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteNodeRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetNodeByName(ctx context.Context, name NodeName, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetNodeByNameRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutNodeByNameWithBody(ctx context.Context, name NodeName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutNodeByNameRequestWithBody(c.Server, name, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutNodeByName(ctx context.Context, name NodeName, body PutNodeByNameJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutNodeByNameRequest(c.Server, name, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllUsers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllUsersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUserWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUser(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUserRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserByUsername(ctx context.Context, username Username, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserByUsernameRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTokenByUsername(ctx context.Context, username Username, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTokenByUsernameRequest(c.Server, username)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewDeleteHieraLevelRequest generates requests for DeleteHieraLevel
func NewDeleteHieraLevelRequest(server string, params *DeleteHieraLevelParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hiera/level")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "level", runtime.ParamLocationQuery, params.Level); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHieraLevelRequest generates requests for GetHieraLevel
func NewGetHieraLevelRequest(server string, params *GetHieraLevelParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hiera/level")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "level", runtime.ParamLocationQuery, params.Level); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutHieraLevelRequest calls the generic PutHieraLevel builder with application/json body
func NewPutHieraLevelRequest(server string, params *PutHieraLevelParams, body PutHieraLevelJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutHieraLevelRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPutHieraLevelRequestWithBody generates requests for PutHieraLevel with any type of body
func NewPutHieraLevelRequestWithBody(server string, params *PutHieraLevelParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hiera/level")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if queryFrag, err := runtime.StyleParamWithLocation("form", true, "level", runtime.ParamLocationQuery, params.Level); err != nil {
		return nil, err
	} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
		return nil, err
	} else {
		for k, v := range parsed {
			for _, v2 := range v {
				queryValues.Add(k, v2)
			}
		}
	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHieraLevelsRequest generates requests for GetHieraLevels
func NewGetHieraLevelsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hiera/levels")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetHieraValuesRequest generates requests for GetHieraValues
func NewGetHieraValuesRequest(server string, params *GetHieraValuesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hiera/values")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Level != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "level", runtime.ParamLocationQuery, *params.Level); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Key != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteHieraValuesRequest calls the generic DeleteHieraValues builder with application/json body
func NewDeleteHieraValuesRequest(server string, body DeleteHieraValuesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteHieraValuesRequestWithBody(server, "application/json", bodyReader)
}

// NewDeleteHieraValuesRequestWithBody generates requests for DeleteHieraValues with any type of body
func NewDeleteHieraValuesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hiera/values/delete")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpsertHieraValuesRequest calls the generic UpsertHieraValues builder with application/json body
func NewUpsertHieraValuesRequest(server string, body UpsertHieraValuesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpsertHieraValuesRequestWithBody(server, "application/json", bodyReader)
}

// NewUpsertHieraValuesRequestWithBody generates requests for UpsertHieraValues with any type of body
func NewUpsertHieraValuesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/hiera/values/upsert")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllNodesRequest generates requests for GetAllNodes
func NewGetAllNodesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteNodeRequest generates requests for DeleteNode
func NewDeleteNodeRequest(server string, name NodeName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetNodeByNameRequest generates requests for GetNodeByName
func NewGetNodeByNameRequest(server string, name NodeName) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutNodeByNameRequest calls the generic PutNodeByName builder with application/json body
func NewPutNodeByNameRequest(server string, name NodeName, body PutNodeByNameJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutNodeByNameRequestWithBody(server, name, "application/json", bodyReader)
}

// NewPutNodeByNameRequestWithBody generates requests for PutNodeByName with any type of body
func NewPutNodeByNameRequestWithBody(server string, name NodeName, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/nodes/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllUsersRequest generates requests for GetAllUsers
func NewGetAllUsersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUserRequest calls the generic CreateUser builder with application/json body
func NewCreateUserRequest(server string, body CreateUserJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateUserRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateUserRequestWithBody generates requests for CreateUser with any type of body
func NewCreateUserRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserByUsernameRequest generates requests for GetUserByUsername
func NewGetUserByUsernameRequest(server string, username Username) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTokenByUsernameRequest generates requests for GetTokenByUsername
func NewGetTokenByUsernameRequest(server string, username Username) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "username", runtime.ParamLocationPath, username)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/users/%s/token", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// DeleteHieraLevel request
	DeleteHieraLevelWithResponse(ctx context.Context, params *DeleteHieraLevelParams, reqEditors ...RequestEditorFn) (*DeleteHieraLevelResponse, error)

	// GetHieraLevel request
	GetHieraLevelWithResponse(ctx context.Context, params *GetHieraLevelParams, reqEditors ...RequestEditorFn) (*GetHieraLevelResponse, error)

	// PutHieraLevel request with any body
	PutHieraLevelWithBodyWithResponse(ctx context.Context, params *PutHieraLevelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutHieraLevelResponse, error)

	PutHieraLevelWithResponse(ctx context.Context, params *PutHieraLevelParams, body PutHieraLevelJSONRequestBody, reqEditors ...RequestEditorFn) (*PutHieraLevelResponse, error)

	// GetHieraLevels request
	GetHieraLevelsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHieraLevelsResponse, error)

	// GetHieraValues request
	GetHieraValuesWithResponse(ctx context.Context, params *GetHieraValuesParams, reqEditors ...RequestEditorFn) (*GetHieraValuesResponse, error)

	// DeleteHieraValues request with any body
	DeleteHieraValuesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteHieraValuesResponse, error)

	DeleteHieraValuesWithResponse(ctx context.Context, body DeleteHieraValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteHieraValuesResponse, error)

	// UpsertHieraValues request with any body
	UpsertHieraValuesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertHieraValuesResponse, error)

	UpsertHieraValuesWithResponse(ctx context.Context, body UpsertHieraValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertHieraValuesResponse, error)

	// GetAllNodes request
	GetAllNodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllNodesResponse, error)

	// DeleteNode request
	DeleteNodeWithResponse(ctx context.Context, name NodeName, reqEditors ...RequestEditorFn) (*DeleteNodeResponse, error)

	// GetNodeByName request
	GetNodeByNameWithResponse(ctx context.Context, name NodeName, reqEditors ...RequestEditorFn) (*GetNodeByNameResponse, error)

	// PutNodeByName request with any body
	PutNodeByNameWithBodyWithResponse(ctx context.Context, name NodeName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutNodeByNameResponse, error)

	PutNodeByNameWithResponse(ctx context.Context, name NodeName, body PutNodeByNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutNodeByNameResponse, error)

	// GetAllUsers request
	GetAllUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllUsersResponse, error)

	// CreateUser request with any body
	CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error)

	// GetUserByUsername request
	GetUserByUsernameWithResponse(ctx context.Context, username Username, reqEditors ...RequestEditorFn) (*GetUserByUsernameResponse, error)

	// GetTokenByUsername request
	GetTokenByUsernameWithResponse(ctx context.Context, username Username, reqEditors ...RequestEditorFn) (*GetTokenByUsernameResponse, error)
}

type DeleteHieraLevelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteHieraLevelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHieraLevelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHieraLevelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *HieraLevel
}

// Status returns HTTPResponse.Status
func (r GetHieraLevelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHieraLevelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutHieraLevelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PutHieraLevelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutHieraLevelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHieraLevelsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetHieraLevelsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHieraLevelsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHieraValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]HieraValue
}

// Status returns HTTPResponse.Status
func (r GetHieraValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHieraValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteHieraValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteHieraValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteHieraValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpsertHieraValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r UpsertHieraValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpsertHieraValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllNodesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Node
}

// Status returns HTTPResponse.Status
func (r GetAllNodesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllNodesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteNodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteNodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteNodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetNodeByNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Node
}

// Status returns HTTPResponse.Status
func (r GetNodeByNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetNodeByNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutNodeByNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Node
	JSON201      *Node
}

// Status returns HTTPResponse.Status
func (r PutNodeByNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutNodeByNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
}

// Status returns HTTPResponse.Status
func (r GetAllUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUserResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *User
}

// Status returns HTTPResponse.Status
func (r CreateUserResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUserResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserByUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetUserByUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserByUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTokenByUsernameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Token
}

// Status returns HTTPResponse.Status
func (r GetTokenByUsernameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTokenByUsernameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// DeleteHieraLevelWithResponse request returning *DeleteHieraLevelResponse
func (c *ClientWithResponses) DeleteHieraLevelWithResponse(ctx context.Context, params *DeleteHieraLevelParams, reqEditors ...RequestEditorFn) (*DeleteHieraLevelResponse, error) {
	rsp, err := c.DeleteHieraLevel(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHieraLevelResponse(rsp)
}

// GetHieraLevelWithResponse request returning *GetHieraLevelResponse
func (c *ClientWithResponses) GetHieraLevelWithResponse(ctx context.Context, params *GetHieraLevelParams, reqEditors ...RequestEditorFn) (*GetHieraLevelResponse, error) {
	rsp, err := c.GetHieraLevel(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHieraLevelResponse(rsp)
}

// PutHieraLevelWithBodyWithResponse request with arbitrary body returning *PutHieraLevelResponse
func (c *ClientWithResponses) PutHieraLevelWithBodyWithResponse(ctx context.Context, params *PutHieraLevelParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutHieraLevelResponse, error) {
	rsp, err := c.PutHieraLevelWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutHieraLevelResponse(rsp)
}

func (c *ClientWithResponses) PutHieraLevelWithResponse(ctx context.Context, params *PutHieraLevelParams, body PutHieraLevelJSONRequestBody, reqEditors ...RequestEditorFn) (*PutHieraLevelResponse, error) {
	rsp, err := c.PutHieraLevel(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutHieraLevelResponse(rsp)
}

// GetHieraLevelsWithResponse request returning *GetHieraLevelsResponse
func (c *ClientWithResponses) GetHieraLevelsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHieraLevelsResponse, error) {
	rsp, err := c.GetHieraLevels(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHieraLevelsResponse(rsp)
}

// GetHieraValuesWithResponse request returning *GetHieraValuesResponse
func (c *ClientWithResponses) GetHieraValuesWithResponse(ctx context.Context, params *GetHieraValuesParams, reqEditors ...RequestEditorFn) (*GetHieraValuesResponse, error) {
	rsp, err := c.GetHieraValues(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHieraValuesResponse(rsp)
}

// DeleteHieraValuesWithBodyWithResponse request with arbitrary body returning *DeleteHieraValuesResponse
func (c *ClientWithResponses) DeleteHieraValuesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteHieraValuesResponse, error) {
	rsp, err := c.DeleteHieraValuesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHieraValuesResponse(rsp)
}

func (c *ClientWithResponses) DeleteHieraValuesWithResponse(ctx context.Context, body DeleteHieraValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteHieraValuesResponse, error) {
	rsp, err := c.DeleteHieraValues(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteHieraValuesResponse(rsp)
}

// UpsertHieraValuesWithBodyWithResponse request with arbitrary body returning *UpsertHieraValuesResponse
func (c *ClientWithResponses) UpsertHieraValuesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpsertHieraValuesResponse, error) {
	rsp, err := c.UpsertHieraValuesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertHieraValuesResponse(rsp)
}

func (c *ClientWithResponses) UpsertHieraValuesWithResponse(ctx context.Context, body UpsertHieraValuesJSONRequestBody, reqEditors ...RequestEditorFn) (*UpsertHieraValuesResponse, error) {
	rsp, err := c.UpsertHieraValues(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpsertHieraValuesResponse(rsp)
}

// GetAllNodesWithResponse request returning *GetAllNodesResponse
func (c *ClientWithResponses) GetAllNodesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllNodesResponse, error) {
	rsp, err := c.GetAllNodes(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllNodesResponse(rsp)
}

// DeleteNodeWithResponse request returning *DeleteNodeResponse
func (c *ClientWithResponses) DeleteNodeWithResponse(ctx context.Context, name NodeName, reqEditors ...RequestEditorFn) (*DeleteNodeResponse, error) {
	rsp, err := c.DeleteNode(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteNodeResponse(rsp)
}

// GetNodeByNameWithResponse request returning *GetNodeByNameResponse
func (c *ClientWithResponses) GetNodeByNameWithResponse(ctx context.Context, name NodeName, reqEditors ...RequestEditorFn) (*GetNodeByNameResponse, error) {
	rsp, err := c.GetNodeByName(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetNodeByNameResponse(rsp)
}

// PutNodeByNameWithBodyWithResponse request with arbitrary body returning *PutNodeByNameResponse
func (c *ClientWithResponses) PutNodeByNameWithBodyWithResponse(ctx context.Context, name NodeName, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutNodeByNameResponse, error) {
	rsp, err := c.PutNodeByNameWithBody(ctx, name, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutNodeByNameResponse(rsp)
}

func (c *ClientWithResponses) PutNodeByNameWithResponse(ctx context.Context, name NodeName, body PutNodeByNameJSONRequestBody, reqEditors ...RequestEditorFn) (*PutNodeByNameResponse, error) {
	rsp, err := c.PutNodeByName(ctx, name, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutNodeByNameResponse(rsp)
}

// GetAllUsersWithResponse request returning *GetAllUsersResponse
func (c *ClientWithResponses) GetAllUsersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllUsersResponse, error) {
	rsp, err := c.GetAllUsers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllUsersResponse(rsp)
}

// CreateUserWithBodyWithResponse request with arbitrary body returning *CreateUserResponse
func (c *ClientWithResponses) CreateUserWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUserWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

func (c *ClientWithResponses) CreateUserWithResponse(ctx context.Context, body CreateUserJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateUserResponse, error) {
	rsp, err := c.CreateUser(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUserResponse(rsp)
}

// GetUserByUsernameWithResponse request returning *GetUserByUsernameResponse
func (c *ClientWithResponses) GetUserByUsernameWithResponse(ctx context.Context, username Username, reqEditors ...RequestEditorFn) (*GetUserByUsernameResponse, error) {
	rsp, err := c.GetUserByUsername(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserByUsernameResponse(rsp)
}

// GetTokenByUsernameWithResponse request returning *GetTokenByUsernameResponse
func (c *ClientWithResponses) GetTokenByUsernameWithResponse(ctx context.Context, username Username, reqEditors ...RequestEditorFn) (*GetTokenByUsernameResponse, error) {
	rsp, err := c.GetTokenByUsername(ctx, username, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTokenByUsernameResponse(rsp)
}

// ParseDeleteHieraLevelResponse parses an HTTP response from a DeleteHieraLevelWithResponse call
func ParseDeleteHieraLevelResponse(rsp *http.Response) (*DeleteHieraLevelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHieraLevelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetHieraLevelResponse parses an HTTP response from a GetHieraLevelWithResponse call
func ParseGetHieraLevelResponse(rsp *http.Response) (*GetHieraLevelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHieraLevelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest HieraLevel
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutHieraLevelResponse parses an HTTP response from a PutHieraLevelWithResponse call
func ParsePutHieraLevelResponse(rsp *http.Response) (*PutHieraLevelResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutHieraLevelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetHieraLevelsResponse parses an HTTP response from a GetHieraLevelsWithResponse call
func ParseGetHieraLevelsResponse(rsp *http.Response) (*GetHieraLevelsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHieraLevelsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetHieraValuesResponse parses an HTTP response from a GetHieraValuesWithResponse call
func ParseGetHieraValuesResponse(rsp *http.Response) (*GetHieraValuesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHieraValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []HieraValue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteHieraValuesResponse parses an HTTP response from a DeleteHieraValuesWithResponse call
func ParseDeleteHieraValuesResponse(rsp *http.Response) (*DeleteHieraValuesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteHieraValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseUpsertHieraValuesResponse parses an HTTP response from a UpsertHieraValuesWithResponse call
func ParseUpsertHieraValuesResponse(rsp *http.Response) (*UpsertHieraValuesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpsertHieraValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetAllNodesResponse parses an HTTP response from a GetAllNodesWithResponse call
func ParseGetAllNodesResponse(rsp *http.Response) (*GetAllNodesResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllNodesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Node
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteNodeResponse parses an HTTP response from a DeleteNodeWithResponse call
func ParseDeleteNodeResponse(rsp *http.Response) (*DeleteNodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteNodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetNodeByNameResponse parses an HTTP response from a GetNodeByNameWithResponse call
func ParseGetNodeByNameResponse(rsp *http.Response) (*GetNodeByNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetNodeByNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Node
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePutNodeByNameResponse parses an HTTP response from a PutNodeByNameWithResponse call
func ParsePutNodeByNameResponse(rsp *http.Response) (*PutNodeByNameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutNodeByNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Node
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest Node
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetAllUsersResponse parses an HTTP response from a GetAllUsersWithResponse call
func ParseGetAllUsersResponse(rsp *http.Response) (*GetAllUsersResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateUserResponse parses an HTTP response from a CreateUserWithResponse call
func ParseCreateUserResponse(rsp *http.Response) (*CreateUserResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUserResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseGetUserByUsernameResponse parses an HTTP response from a GetUserByUsernameWithResponse call
func ParseGetUserByUsernameResponse(rsp *http.Response) (*GetUserByUsernameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserByUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetTokenByUsernameResponse parses an HTTP response from a GetTokenByUsernameWithResponse call
func ParseGetTokenByUsernameResponse(rsp *http.Response) (*GetTokenByUsernameResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTokenByUsernameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Token
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
