openapi: 3.0.1
info:
  title: 'WIP: Puppet Data Service API'
  description: 'This is the API documentation for the Puppet Data Service API.  You can find out more about     the [PDS API at here](https://github.com/reidmv/reidmv-puppet_data_service). For this sample, you can use the api key `special-key` to test the authorization     filters.'
  termsOfService: http://swagger.io/terms/
  contact:
    email: solarch-team@puppet.com
  license:
    name: TBD
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: localhost:3000/v1
tags:
- name: users
  description: Every config change should be started with an authorized User
  externalDocs:
    description: TBD Find out more
    url: https://puppet.com/
- name: nodes
  description: Node details and configuration data, Nodedata stores configuration details for a specific node and Hierdata manages your Hiera Key:Value as a service

paths:
  /users:
    get:
      tags:
      - users
      summary: Get all available users
      description: This can only be done by the logged in user with a superadmin role.
      operationId: getAllUsers
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      tags:
      - users
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        $ref: '#/components/requestBodies/NewUser'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      x-codegen-request-body-name: body

  /users/{id}:
    get:
      tags:
      - users
      summary: Get user by user id
      operationId: getUserById
      parameters:
      - name: id
        in: path
        description: 'The user ID that needs to be fetched. Use user1 for testing. '
        required: true
        schema:
          type: string
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        400:
          description: 'Invalid user supplied'
        404:
          description: 'User not found'

  /nodes:
    get:
      tags:
      - nodes
      summary: Get all available nodes
      description: This can only be done by the logged in user.
      operationId: getAllNodes
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Node'

  /nodes/{name}:
    get:
      tags:
      - nodes
      summary: Get node by node name
      operationId: getNodeByName
      parameters:
      - $ref: '#/components/parameters/NodeName'
      responses:
        200:
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        400:
          description: Invalid node-name supplied
        404:
          description: Node not found

    put:
      tags:
      - nodes
      summary: Create a new node or replace an existing node
      description: This can only be done by the logged in user.
      operationId: putNodeByName
      parameters:
      - $ref: '#/components/parameters/NodeName'
      requestBody:
        $ref: '#/components/requestBodies/NewNode'
      responses:
        200:
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        400:
          description: Invalid node-name supplied
        404:
          description: Node not found

    patch:
      tags:
      - nodes
      summary: Edit properties of an existing node
      description: This can only be done by the logged in user.
      operationId: editNode
      parameters:
      - $ref: '#/components/parameters/NodeName'
      requestBody:
        $ref: '#/components/requestBodies/EditNode'
      responses:
        200:
          description: Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Node'
        400:
          description: Invalid node-name supplied
        404:
          description: Node not found

    delete:
      tags:
      - nodes
      summary: Deletes a node
      operationId: deleteNode
      parameters:
      - $ref: '#/components/parameters/NodeName'
      responses:
        200:
          description: Ok
          content: {}
        400:
          description: Invalid Node name supplied
          content: {}
        404:
          description: Nodedata not found
          content: {}

components:
  schemas:
    TimestampProperties:
      type: object
      properties:
        created-at:
          type: string
          format: date-time
        updated-at:
          type: string
          format: date-time

    ImmutableUserProperties:
      type: object
      properties:
        id:
          type: string
          format: uuid
        temp_token:
          type: string

    EditableUserProperties:
      type: object
      properties:
        email:
          type: string
        role:
          type: string
          description: User role
          default: operator
          enum:
          - operator
          - superadmin
        status:
          type: string
          description: User status
          default: active
          enum:
          - active
          - inactive
          - deleted

    User:
      allOf:
      - $ref: '#/components/schemas/ImmutableUserProperties'
      - $ref: '#/components/schemas/EditableUserProperties'
      - $ref: '#/components/schemas/TimestampProperties'

    ImmutableNodeProperties:
      type: object
      properties:
        name:
          type: string

    EditableNodeProperties:
      type: object
      properties:
        code_environment:
          type: string
          description: Code environment
          enum:
          - staging
          - production
          - compliance
        classes:
          type: object
          additionalProperties:
            type: string
        trusted_data:
          type: object
          additionalProperties: true

    Node:
      allOf:
      - $ref: '#/components/schemas/ImmutableNodeProperties'
      - $ref: '#/components/schemas/EditableNodeProperties'
      - $ref: '#/components/schemas/TimestampProperties'

    EditableHieradataProperties:
      type: object
      properties:
        level:
          type: string
        key:
          type: string
        value:
          type: string
          description: JSON-encoded value

    Hieradata:
      allOf:
      - $ref: '#/components/schemas/EditableHieradataProperties'
      - $ref: '#/components/schemas/TimestampProperties'

    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string

  parameters:
    NodeName:
      name: name
      in: path
      description: 'The node name to be fetched or modified. Use node1 for testing.'
      required: true
      schema:
        type: string

  requestBodies:
    NewUser:
      description: Create user object
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/EditableUserProperties'
              - required: ['email']

    NewNode:
      description: Create node object
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/ImmutableNodeProperties'
              - $ref: '#/components/schemas/EditableNodeProperties'
              - required: ['name']

    EditNode:
      description: Edit existing node object
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/EditableNodeProperties'

    NewHieradata:
      description: Create hieradata object
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/EditableHieradataProperties'
              - required: ['level', 'key', 'value']

  responses:
    204NoContent:
      description: No content.
      content: {}
    400BadRequest:
      description: Bad request.
      content: {}
    404NotFound:
      description: The specified resource was not found.
      content: {}

  securitySchemes:
    pds_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://tbd.swagger.io/oauth/dialog
          scopes:
            write:pets: modify data in your account
            read:pets: read your data
    api_key:
      type: apiKey
      name: api_key
      in: header
